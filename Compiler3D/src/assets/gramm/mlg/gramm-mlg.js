/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammMlg = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,19,26,27],$V1=[2,7],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[5,26,27],$V6=[5,7,8,18,19,26,27],$V7=[5,7,8,18,19,26,27,30],$V8=[5,27],$V9=[5,7,8,15,18,19,26,27],$Va=[5,7,8,30];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"BLOQUES_CODE":4,"EOF":5,"BLOQUE_COMMENTS":6,"comentario_simple":7,"comentario_bloque":8,"BLOQUES_PAQUETES":9,"BLOQUES_PYTHON":10,"BLOQUES_JAVA":11,"BLOQUES_CPP":12,"PAQUETE_STATE":13,"PAQUETE_PADRE":14,"punto":15,"asterisco":16,"id":17,"paquete":18,"block_py":19,"PY_BLANCOS":20,"indent":21,"dedent":22,"STATE_INDENT":23,"STATE_DEDENT":24,"CODIGO_PY":25,"block_java":26,"block_cpp":27,"CODE_PROGRAMA":28,"INCLUDE_LIB":29,"include":30,"library":31,"cadena":32,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"comentario_simple",8:"comentario_bloque",15:"punto",16:"asterisco",17:"id",18:"paquete",19:"block_py",21:"indent",22:"dedent",26:"block_java",27:"block_cpp",30:"include",31:"library",32:"cadena"},
productions_: [0,[3,2],[6,1],[6,1],[4,4],[9,2],[9,2],[9,0],[13,1],[13,3],[14,3],[14,2],[10,1],[10,0],[20,1],[20,1],[20,1],[20,1],[23,1],[24,1],[25,0],[11,1],[11,0],[12,2],[12,0],[28,2],[28,2],[28,0],[29,2],[29,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 /*console.log($$[$0-1]);*/ /*resultado = $$[$0-1];*/ /*return $$[$0-1];*/ return new PositionToken(1,25);
break;
case 5: case 6: case 7: case 13: case 20: case 21: case 22: case 23: case 24:
 this.$ = []; 
break;
case 12:
 this.$ = $$[$0]; 
break;
}
},
table: [o($V0,$V1,{3:1,4:2,9:3,13:4,6:5,14:6,7:$V2,8:$V3,18:$V4}),{1:[3]},{5:[1,10]},o($V5,[2,13],{10:11,19:[1,12]}),o($V0,$V1,{13:4,6:5,14:6,9:13,7:$V2,8:$V3,18:$V4}),o($V0,$V1,{13:4,6:5,14:6,9:14,7:$V2,8:$V3,18:$V4}),o($V6,[2,8],{15:[1,15]}),o($V7,[2,2]),o($V7,[2,3]),{17:[1,16]},{1:[2,1]},o($V8,[2,22],{11:17,26:[1,18]}),o($V5,[2,12]),o($V0,[2,5]),o($V0,[2,6]),{16:[1,19],17:[1,20]},o($V9,[2,11]),{5:[2,24],12:21,27:[1,22]},o($V8,[2,21]),o($V6,[2,9]),o($V9,[2,10]),{5:[2,4]},o($Va,[2,27],{28:23}),{5:[2,23],6:24,7:$V2,8:$V3,29:25,30:[1,26]},o($Va,[2,25]),o($Va,[2,26]),{31:[1,27],32:[1,28]},o($Va,[2,28]),o($Va,[2,29])],
defaultActions: {10:[2,1],21:[2,4]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var resultado;
    let listErrors = new Array();
    let pilaAmbito = new Array();

    const { PositionToken } = require('src/app/core/models/mlg/error/position-token.ts');
    const { ErrorGram } = require("src/app/core/models/mlg/error/error-gramm.ts");
    // const { TreeAST } = require("src/app/core/models/mlg/AST/tree-ast.ts");


    // //Imports del AST
    // //Expressions
    // const { DataType, Types } = require("src/app/core/models/mlg/Utils/data-type.ts");
    // const { ArithTypes } = require("src/app/core/models/mlg/Utils/arith-type.ts");
    // const { LogicalTypes } = require("src/app/core/models/mlg/Utils/logical-type.ts");
    // const { RatioTypes } = require("src/app/core/models/mlg/Utils/rational-type.ts");
    // // const { ArrayExp } = require("src/app/core/models/mlg/Expressions/ArrayExp");
    // const { Break } = require("src/app/core/models/mlg/Expressions/break.ts");
    // const { Continue } = require("src/app/core/models/mlg/Expressions/continue.ts");
    // const { Identifier } = require("src/app/core/models/mlg/Expressions/identifier.ts");
    // // const { InputCall } = require("src/app/core/models/mlg/Expressions/InputCall");
    // const { OperationArithmetic } = require("src/app/core/models/mlg/Expressions/operation-arithmetic.ts");
    // // const { OperationLogical } = require("src/app/core/models/mlg/Expressions/OperationLogical");
    // const { OperationRational } = require("src/app/core/models/mlg/Expressions/operation-rational.ts");
    // const { Primitive } = require("src/app/core/models/mlg/Expressions/primitive.ts");
    // const { Return } = require("src/app/core/models/mlg/Expressions/return.ts");
    // //Instructions
    // const { Declaration } = require("src/app/core/models/mlg/Instructions/declaration.ts");
    // const { ForInst, Range } = require("src/app/core/models/mlg/Instructions/for-inst.ts");
    // const { FunctionInst } = require("src/app/core/models/mlg/Instructions/function-inst.ts");
    // const { IfInst, ElIfInst, ElseInst } = require("src/app/core/models/mlg/Instructions/if-inst.ts");
    // const { InputCall, TypeInput } = require("src/app/core/models/mlg/Instructions/input-call.ts");
    // const { Print } = require("src/app/core/models/mlg/Instructions/print.ts");
    // const { WhileInst } = require("src/app/core/models/mlg/Instructions/while-inst.ts");
    
    // const { Gramm } = require("src/app/core/models/mlg/gramm.ts");

    // function addError(row, column, typeError, tokenS, description){
    //     let positionToken = new PositionToken(row, column);
    //     let errorGram = new ErrorGram(positionToken, typeError, tokenS, description);
    //     console.log(errorGram);
    //     console.log(`Error>> Linea: ${row}, Columna: ${column}, TipoError: ${typeError}, Token: ${tokenS}, Descripcion: ${description}`);
        
    //     listErrors.push(errorGram);
    // }

    function getListErrors(){
        return listErrors;
    }

    function paint(texto){
        console.log(texto);
    }

    function resetData(){
        // listErrors = [];
        // pilaAmbito = [];
    }

    //para la identacion
    var estadoIdent = false;
    var contadorAmbito=0, ambitoActual=0;

    function iniciar(){
        pilaAmbito.push(0);
    }

    function verificarIndentacion(value, size){
        if(!(pilaAmbito.length==0)){
            var ambito = pilaAmbito[pilaAmbito.length - 1]
            if((ambito+1)==size){
                pilaAmbito.push(ambito+1);
                // console.log(value.substr(1,value.length),'INDENT:',(ambito+1));
                return 'indent';
            }else if((ambito-1)==size){
                pilaAmbito.push(ambito-1);
                // console.log(value.substr(1,value.length),'DEDENT:',(ambito-1));
                return 'dedent';
            }else if(ambito==size){
                // console.log(value.substr(1,value.length),'SALTO_:',ambito);
                return null;
            }else{
                // console.log(value.substr(1,value.length),'ERROR DE identacion');
                // return ' ';
                // return null;
            }
        }else{
            iniciar();
            return verificarIndentacion(value, size);
        }
    }

    function getTabs(texto, size){
        let contador = 0;
        let contadorS = 0;
        // console.log('<',texto,'> size:',size);
        for(let i = 0; i<size; i++){
            let caracter = texto.substr(i,1);
            // console.log('char:',caracter,'| tamanio',caracter.length);
            switch(caracter){
                case '\t':
                // case '\n\t':
                    // console.log('Tchar:|'+caracter+'| t');
                    contador++;
                    break;
                case ' ':
                // case '  ':
                // case '    ':
                // case '      ':
                case '\b':
                // case '':
                    // console.log('Tchar:|'+caracter+'| s');
                    contadorS++;
                    break;
                case '\n':
                case '\r':
                    // console.log('Tchar:|'+caracter+'| n');
                    // contador++;
                    break;
                    default:
                    // console.log('Tchar:|'+caracter+'| l');
            }
            if(contadorS==4){
                contador++;
                contadorS = 0;
            }
        }
        // console.log('Contador:',contador);
        return contador;
    }
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: var sim = verificarIndentacion(yy_.yytext, getTabs(yy_.yytext, yy_.yyleng) ); if(sim!=null){return sim;}else{/*IGNORAR*/}
break;
case 1: resetData(); this.pushState('PYTHON'); paint("<INTIAL>"+yy_.yytext); return 19;
break;
case 2: this.popState(); this.pushState('PYTHON'); paint("<IMPORT>"+yy_.yytext); return 19;
break;
case 3: resetData(); this.pushState('JAVA'); paint("<INTIAL>"+yy_.yytext); return 26;
break;
case 4: this.popState(); this.pushState('JAVA'); paint("<PYTHON>"+yy_.yytext); return 26;
break;
case 5: resetData(); this.pushState('CPP'); paint("<INTIAL>"+yy_.yytext); return 27;
break;
case 6: this.popState(); this.pushState('CPP'); paint("<JAVA>"+yy_.yytext); return 27;
break;
case 7: resetData(); this.pushState('IMPORT'); return 18;
break;
case 8: return 18;
break;
case 9: return 17;
break;
case 10: return 15;
break;
case 11: return 16;
break;
case 12: return 'def';
break;
case 13: return 'return';
break;
case 14: return 'and';
break;
case 15: return 'or';
break;
case 16: return 'not';
break;
case 17: return 'input';
break;
case 18: return 'if';
break;
case 19: return 'elif';
break;
case 20: return 'else';
break;
case 21: return 'for';
break;
case 22: return 'in';
break;
case 23: return 'range';
break;
case 24: return 'while';
break;
case 25: return 'break';
break;
case 26: return 'continue';
break;
case 27: paint('comentario_simple: '+yy_.yytext); return 7;
break;
case 28: paint('comentario_bloque: '+yy_.yytext); return 8;
break;
case 29: paint('comentario_simple: '+yy_.yytext); return 7;
break;
case 30: paint('comentario_bloque: '+yy_.yytext); return 8;
break;
case 31: return "mas"; 
break;
case 32: return "menos"; 
break;
case 33: return "por"; 
break;
case 34: return "div"; 
break;
case 35: return "mod"; 
break;
case 36: return "pot"; 
break;
case 37: return "pot"; 
break;
case 38: return 'print';
break;
case 39: return 'println';
break;
case 40:paint(yy_.yytext); paint("Estado actual: "+this.topState()); return 31;
break;
case 41: return 'mayor_q';
break;
case 42: return 'menor_q';
break;
case 43: return 'igual_igual';
break;
case 44: return 'mayor_igual';
break;
case 45: return 'menor_igual';
break;
case 46: return 'diferente';
break;
case 47: return 'dos_puntos';
break;
case 48: return 'coma';
break;
case 49: return 'punto_coma';
break;
case 50: return 'par_a';
break;
case 51: return 'par_c';
break;
case 52: return 'cor_a';
break;
case 53: return 'cor_c';
break;
case 54: return 'igual';
break;
case 55: return 'true';
break;
case 56: return 'false';
break;
case 57:paint(yy_.yytext); yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 32; 
break;
case 58:paint(yy_.yytext); yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 'caracter'; 
break;
case 59:paint('entero: '+yy_.yytext); return 'entero';
break;
case 60:paint('decimal: '+yy_.yytext); return 'decimal';
break;
case 61: return 17;
break;
case 62:paint(yy_.yytext); paint("Estado actual: "+this.topState()); return 30;
break;
case 63:/* skip whitespace */
break;
case 64:/* skip whitespace */
break;
case 65: console.log(yy_.yytext); return 5;
break;
case 66: console.log(yy_.yytext); return 'INVALID';
break;
}
},
rules: [/^(?:(([\n]+(((    |\\b\\b\\b\\b))+|(([\t]))+)?)))/,/^(?:%%PY\b)/,/^(?:%%PY\b)/,/^(?:%%JAVA\b)/,/^(?:%%JAVA\b)/,/^(?:%%PROGRAMA\b)/,/^(?:%%PROGRAMA\b)/,/^(?:paquete\b)/,/^(?:paquete\b)/,/^(?:([a-zA-Z]([a-zA-Z_]|[0-9])*))/,/^(?:\.)/,/^(?:\*)/,/^(?:def\b)/,/^(?:return\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:input\b)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:range\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:[/][/][/]*[^\n]*[\n]?)/,/^(?:[/*][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[/][/][/]*[^\n]*[\n]?)/,/^(?:[/*][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:\^)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:<[^\"]*>)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"[^\"]*")/,/^(?:'[^\']?')/,/^(?:(([0-9])([0-9])*))/,/^(?:(([0-9])([0-9])*)(\.)(([0-9])([0-9])*))/,/^(?:([a-zA-Z]([a-zA-Z_]|[0-9])*))/,/^(?:#include\b)/,/^(?:[ \r\b\f\t]+)/,/^(?:\s+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[1,3,5,7,29,30,64,65,66],"inclusive":true},"IMPORT":{"rules":[2,8,9,10,11,29,30,64,65,66],"inclusive":true},"PYTHON":{"rules":[0,4,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66],"inclusive":true},"JAVA":{"rules":[6,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66],"inclusive":true},"CPP":{"rules":[29,30,31,32,33,34,35,36,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammMlg;
exports.Parser = grammMlg.Parser;
exports.parse = function () { return grammMlg.parse.apply(grammMlg, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    // var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}